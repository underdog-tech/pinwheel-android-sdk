version: 2.1
references:
  workspace: &workspace
               ~/src

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-29
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  gradle_key: &gradle_key
                jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gem_key: &gems_key
             gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle
        - ~/.m2

  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_key
      paths:
        - vendor/bundle

  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle install --path vendor/bundle
  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  decode_android_key: &decode_android_key
    run:
      name: Decode Android key store
      command: echo $BASE_64_KEYSTORE | base64 -d | tee debug.keystore app/debug.keystore > /dev/null

  create_keystore_properties: &create_keystore_properties
    run:
      name: Create keystore.properties
      command: printf 'keyAlias=%s\nkeyPassword=%s\nkeyStore=%s\nstorePassword=%s' \
        $KEY_ALIAS $KEY_PASSWORD $KEYSTORE $STORE_PASSWORD > keystore.properties

  create_google_play_key: &create_google_play_key
    run:
      name: Create Google Play Key
      command: echo $GOOGLE_PLAY_KEY > google-play-key.json

jobs:

  test_unit:
    <<: *android_config

    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *create_keystore_properties
      - *decode_android_key
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache

      - run:
          name: Run unit tests
          command: ./gradlew test

      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

      - store_artifacts:
          path: pinwheel-android/build/reports/
          destination: /reports/

      - store_test_results:
          path: app/build/test-results/

      - store_test_results:
          path: pinwheel-android/build/test-results/

  beta_deployment:
    <<: *android_config

    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *create_keystore_properties
      - *decode_android_key
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *create_google_play_key

      - run:
          name: Deploy to Play Store
          command: bundle exec fastlane beta

      - store_artifacts:
          path: app/build/outputs/mapping
          destination: /mapping/

  github_publish:
    <<: *android_config

    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *create_keystore_properties
      - *decode_android_key
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache

      - run:
          name: Assemble release
          command: ./gradlew clean assembleRelease
      - run:
          name: Publish to GitHub
          command: ./gradlew publish

  github_release:
    working_directory: *workspace
    docker:
      - image: cimg/go:1.16.3
    steps:
      - checkout
      - run:
          name: "Install ghr"
          command: |
            go get github.com/tcnksm/ghr
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(cat pinwheel-android/build.gradle | grep 'def libraryVersion' | cut -d"'" -f 2)
            echo ${VERSION}
            ghr -t ${GPR_API_KEY} -delete ${VERSION} .

workflows:
  version: 2
  workflow:
    jobs:
      - test_unit

      - beta_deployment:
          filters:
            branches:
              only:
                - main
          requires:
            - test_unit

      - github_publish:
          filters:
            branches:
              only:
                - release
          requires:
            - test_unit

      - github_release:
          filters:
            branches:
              only:
                - release
          requires:
            - test_unit
